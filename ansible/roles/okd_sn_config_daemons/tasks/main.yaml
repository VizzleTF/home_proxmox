
- name: Setting config for daemons
  block:
    - name: Create named zones directory
      file:
        path: /etc/named/zones
        state: directory
    - name: Copy config files
      copy:
        src: "{{ role_path }}/files/{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - { src: 'dhcpd.conf', dest: '/etc/dhcp/dhcpd.conf' }
        - { src: 'haproxy.cfg', dest: '/etc/haproxy/haproxy.cfg' }
        - { src: 'named.conf', dest: '/etc/named.conf' }
        - { src: 'named.conf.local', dest: '/etc/named/named.conf.local' }
        - { src: 'db.10.11.12', dest: '/etc/named/zones/db.10.11.12' }
        - { src: 'db.okd.local', dest: '/etc/named/zones/db.okd.local' }
    - name: Change apache port
      lineinfile:
        dest: "/etc/httpd/conf/httpd.conf"
        regexp: "^Listen 80"
        line: "Listen 8080"

- name: Setting config for okd installer
  block:
    - name: Ensure directories exist
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ install_dir }}"
        - "{{ web_dir }}/auth"

    - name: Copy install-config.yaml
      copy:
        src: "{{ role_path }}/files/install-config.yaml"
        dest: "{{ install_dir }}/install-config.yaml"

    - name: Check for existing binaries
      stat:
        path: "/usr/local/sbin/{{ item }}"
      register: binary_check
      loop:
        - openshift-install
        - oc

    - name: Download and extract OKD binaries
      unarchive:
        src: "https://github.com/okd-project/okd/releases/download/{{ okd_version }}/{{ item }}-linux-{{ okd_version }}.tar.gz"
        dest: /usr/local/sbin
        remote_src: yes
      loop:
        - openshift-install
        - openshift-client
      when: not binary_check.results[loop.index0].stat.exists

    - name: Remove old configurations
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ install_dir }}"
        - "{{ web_dir }}"

    - name: Create ignition configs
      command: openshift-install create ignition-configs --dir {{ install_dir }}
      args:
        chdir: "{{ install_dir }}"

    - name: Copy ignition files to web server
      copy:
        src: "{{ install_dir }}/{{ item }}"
        dest: "{{ web_dir }}/{{ item }}"
        owner: apache
        group: apache
        remote_src: yes
      loop: "{{ ignition_files }}"